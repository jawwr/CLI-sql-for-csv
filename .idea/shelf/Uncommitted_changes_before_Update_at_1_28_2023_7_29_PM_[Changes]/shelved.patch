Index: src/main/java/core/parser/features/From.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core.parser.features;\r\n\r\nimport core.fileWorker.FileWorker;\r\nimport core.structure.Column;\r\nimport core.structure.ColumnType;\r\nimport core.structure.Table;\r\nimport core.structure.TableStructure;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic class From implements Feature {\r\n    private static FileWorker worker;//TODO сделать по аргументам\r\n\r\n    public static void setPath(String path) {\r\n        From.worker = new FileWorker(path);\r\n    }\r\n\r\n    @Override\r\n    public Table parse(List<String> args, Table table) {\r\n        var fileValue = worker.readFile(args.get(0) + \".csv\");\r\n\r\n        TableStructure structure = new TableStructure(getColumn(fileValue[0]));\r\n        Table allTable = new Table(structure);\r\n        allTable.setValues(getTableValues(fileValue));\r\n\r\n        return allTable;\r\n    }\r\n\r\n\r\n    private String[][] getTableValues(String[][] allValues) {\r\n        var values = Arrays.stream(allValues).skip(1).toArray();\r\n        String[][] tableValues = new String[values.length][];\r\n        for (int i = 0; i < values.length; i++) {\r\n            tableValues[i] = (String[]) values[i];\r\n        }\r\n        return tableValues;\r\n    }\r\n\r\n    private List<Column> getColumn(String[] columns) {\r\n        List<Column> columnList = new ArrayList<>();\r\n        for (String columnValues : columns) {\r\n            Column column = new Column(ColumnType.VARCHAR, columnValues);//TODO (?) сделать проверку на то, какие типы данных могут быть\r\n            columnList.add(column);\r\n        }\r\n\r\n        return columnList;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/core/parser/features/From.java b/src/main/java/core/parser/features/From.java
--- a/src/main/java/core/parser/features/From.java	(revision 7c9dd2a57477118b6ded02040ec247bd413706c8)
+++ b/src/main/java/core/parser/features/From.java	(date 1674823417170)
@@ -11,7 +11,7 @@
 import java.util.List;
 
 public class From implements Feature {
-    private static FileWorker worker;//TODO сделать по аргументам
+    private static FileWorker worker;
 
     public static void setPath(String path) {
         From.worker = new FileWorker(path);
Index: src/main/java/core/parser/features/Where.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core.parser.features;\r\n\r\nimport core.structure.Table;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class Where implements Feature {\r\n    private static final String[] operations = {\"=\", \"<\", \">\", \">=\", \"<=\"};\r\n\r\n    @Override\r\n    public Table parse(List<String> args, Table table) {\r\n        String[][] values = null;\r\n        for (int i = 0; i < args.size() - 1; i++) {\r\n            var operation = args.get(i + 1);\r\n            if (isAvailableOperations(operation)) {\r\n                values = filter(table, operation, args.get(i), args.get(i + 2));\r\n                i ++;\r\n            }\r\n\r\n            if (operation.equalsIgnoreCase(\"or\")) {\r\n                i += 2;\r\n                operation = args.get(i + 1);\r\n                var filterResult = filter(table, operation, args.get(i), args.get(i + 2));\r\n                values = concatFilters(values, filterResult);\r\n            } else if (operation.equalsIgnoreCase(\"and\")) {\r\n                i += 2;\r\n                operation = args.get(i + 1);\r\n                var filterResult = filter(table, operation, args.get(i), args.get(i + 2));\r\n                values = concatFiltersWithAnd(values, filterResult);\r\n            }\r\n        }\r\n        table.setValues(values);\r\n\r\n        return table;\r\n    }\r\n\r\n    private String[][] concatFiltersWithAnd(String[][] firstValues, String[][] secondValues) {\r\n        var minRowNum = Math.min(firstValues.length, secondValues.length);\r\n        var maxLengthArray = firstValues.length != minRowNum ? firstValues : secondValues;\r\n        var minLengthArray = secondValues.length == minRowNum ? secondValues : firstValues;\r\n        String[][] result = new String[minRowNum][];\r\n        int currIndex = 0;\r\n\r\n        for (int i = 0; i < minRowNum; i++){\r\n            if (Arrays.stream(minLengthArray).toList().contains(maxLengthArray[i])){\r\n                result[currIndex] = maxLengthArray[i];\r\n                currIndex++;\r\n            }\r\n        }\r\n\r\n        return Arrays.stream(result).filter(Objects::nonNull).toList().toArray(new String[0][0]);\r\n    }\r\n\r\n    private String[][] filter(Table table, String operation, String columnName, String compareValue) {\r\n        int index = getColumnIndex(table, columnName);\r\n        return filterValueByIndex(table.getValues().clone(), index, operation, compareValue);\r\n    }\r\n\r\n    private String[][] concatFilters(String[][]... allFilterResult) {\r\n        var rowNum = getRowCount(allFilterResult);\r\n        String[][] result = new String[rowNum][];\r\n        int row = 0;\r\n        for (String[][] rows : allFilterResult) {\r\n            for (String[] values : rows) {\r\n                result[row] = values;\r\n                row++;\r\n            }\r\n        }\r\n\r\n        return Arrays.stream(result).distinct().toList().toArray(new String[0][0]);\r\n    }\r\n\r\n    private int getRowCount(String[][]... allRows) {\r\n        int sum = 0;\r\n        for (String[][] rows : allRows) {\r\n            sum += rows.length;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    private String[][] filterValueByIndex(String[][] values, int index, String operation, String value) {\r\n        return switch (operation) {\r\n            case \"=\" -> equalsValues(values, index, value);\r\n            case \"<\" -> compareValues(values, index, value, \"<\");\r\n            case \">\" -> compareValues(values, index, value, \">\");\r\n            case \">=\" -> compareValues(values, index, value, \">=\");\r\n            case \"<=\" -> compareValues(values, index, value, \"<=\");\r\n            default -> null;\r\n        };\r\n    }\r\n\r\n    private String[][] compareValues(String[][] values, int index, String compareValue, String operation) {\r\n        for (int i = 0; i < values.length; i++) {\r\n            int intCompareValue = Integer.parseInt(compareValue);\r\n            int intValue = Integer.parseInt(values[i][index]);\r\n            boolean filter = switch (operation) {\r\n                case \">\" -> intValue > intCompareValue;\r\n                case \"<\" -> intValue < intCompareValue;\r\n                case \">=\" -> intValue >= intCompareValue;\r\n                case \"<=\" -> intValue <= intCompareValue;\r\n                default -> throw new IllegalArgumentException();\r\n            };\r\n\r\n            if (!filter) {\r\n                values[i] = null;\r\n            }\r\n        }\r\n        return Arrays.stream(values).filter(Objects::nonNull).toList().toArray(new String[0][0]);\r\n    }\r\n\r\n    private String[][] equalsValues(String[][] values, int index, String equalsValue) {\r\n        values = Arrays.stream(values).filter(Objects::nonNull).toList().toArray(new String[0][0]);\r\n        for (int i = 0; i < values.length; i++) {\r\n            var value = values[i][index];\r\n            if (!value.equalsIgnoreCase(equalsValue)) {\r\n                values[i] = null;\r\n            }\r\n        }\r\n        return Arrays.stream(values).filter(Objects::nonNull).toList().toArray(new String[0][0]);\r\n    }\r\n\r\n    private boolean isAvailableOperations(String operationName) {\r\n        return Arrays.asList(operations).contains(operationName);\r\n    }\r\n\r\n    private int getColumnIndex(Table table, String name) {\r\n        var columns = table.getStructure().columnList();\r\n        var column = columns.stream().filter(x -> x.getName().equalsIgnoreCase(name)).findFirst().get();\r\n\r\n        return columns.indexOf(column);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/core/parser/features/Where.java b/src/main/java/core/parser/features/Where.java
--- a/src/main/java/core/parser/features/Where.java	(revision 7c9dd2a57477118b6ded02040ec247bd413706c8)
+++ b/src/main/java/core/parser/features/Where.java	(date 1674823336212)
@@ -127,9 +127,13 @@
     }
 
     private int getColumnIndex(Table table, String name) {
-        var columns = table.getStructure().columnList();
-        var column = columns.stream().filter(x -> x.getName().equalsIgnoreCase(name)).findFirst().get();
+        try {
+            var columns = table.getStructure().columnList();
+            var column = columns.stream().filter(x -> x.getName().equalsIgnoreCase(name)).findFirst().get();
 
-        return columns.indexOf(column);
+            return columns.indexOf(column);
+        }catch (Exception e){
+            throw new IllegalArgumentException("Column with that name not exist");
+        }
     }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3508496a-680f-4fc2-a390-173976607910\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/core/parser/features/Where.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/core/parser/features/Where.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2IdlaN2WxL0g4kc9m86vxo24Ui0\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/folder for trash code/sql-interpreter-for-csv&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"core.fileWorker\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"sql-interpreter-for-csv\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"&quot;D:\\folder for trash code\\sql-interpreter-for-csv\\test files&quot;\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3508496a-680f-4fc2-a390-173976607910\" name=\"Changes\" comment=\"\" />\r\n      <created>1670519404016</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1670519404016</updated>\r\n      <workItem from=\"1670519405606\" duration=\"11697000\" />\r\n      <workItem from=\"1670576630582\" duration=\"416000\" />\r\n      <workItem from=\"1670655130076\" duration=\"676000\" />\r\n      <workItem from=\"1670773723570\" duration=\"2977000\" />\r\n      <workItem from=\"1670867613864\" duration=\"1649000\" />\r\n      <workItem from=\"1670959189377\" duration=\"8000\" />\r\n      <workItem from=\"1671359973695\" duration=\"584000\" />\r\n      <workItem from=\"1671383069149\" duration=\"8000\" />\r\n      <workItem from=\"1671453048141\" duration=\"8000\" />\r\n      <workItem from=\"1671637175811\" duration=\"598000\" />\r\n      <workItem from=\"1674738695162\" duration=\"3650000\" />\r\n      <workItem from=\"1674757471855\" duration=\"6920000\" />\r\n      <workItem from=\"1674808152256\" duration=\"14052000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/sql_interpreter_for_csv$Main.ic\" NAME=\"Main Coverage Results\" MODIFIED=\"1674821548634\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7c9dd2a57477118b6ded02040ec247bd413706c8)
+++ b/.idea/workspace.xml	(date 1674828390306)
@@ -6,7 +6,7 @@
   <component name="ChangeListManager">
     <list default="true" id="3508496a-680f-4fc2-a390-173976607910" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/core/parser/features/From.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/core/parser/features/From.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/core/parser/features/Where.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/core/parser/features/Where.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -89,7 +89,7 @@
       <workItem from="1671637175811" duration="598000" />
       <workItem from="1674738695162" duration="3650000" />
       <workItem from="1674757471855" duration="6920000" />
-      <workItem from="1674808152256" duration="14052000" />
+      <workItem from="1674808152256" duration="16079000" />
     </task>
     <servers />
   </component>
